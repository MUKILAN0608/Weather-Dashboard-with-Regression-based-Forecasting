
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast</title>
    <link rel="website icon" type="png" href="c:\Users\Mukil\Downloads\logo-removebg-preview.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
    body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-size: cover;
            background-repeat: no-repeat;
            background-attachment: fixed;
            padding-top: 120px;
        }
        .loader {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #16191e;
            z-index: 10; 
            display: none; 
        }
        .loader > div {
            height: 150px;
            width: 150px;
            border: 15px solid #45474b;
            border-top: 15px solid #3F00FF; 
            position: absolute;
            margin: auto;
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            border-radius: 50%;
            animation: spin 1.5s infinite linear;
        }
        @keyframes spin {
            100% {
                transform: rotate(360deg);
            }
        }
        .content {
            display: none;
        }
        nav {
    position: fixed;
    top: 1px; 
    left: 10px; 
    right: 10px; 
    background: white;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 5px 10px; 
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); 
    border-radius: 15px; 
    transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
    z-index: 1000;
    border: 2px solid transparent;
    animation: neon 1.5s infinite alternate;
    font-size: 12px; 
}
.menu {
            list-style: none;
            margin: 0;
            padding: 0;
            display: flex;
        }
    
        .menu-item {
            position: relative;
            margin: 0 10px;
        }
    
        .menu-item a, .dropdown-menu a, .dropdown-menu button {
            display: block;
            color: #007bff;
            text-align: center;
            background-color: white;
            padding: 8px 15px;
            text-decoration: none;
            font-weight: 500;
            font-size: 1em;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            border-radius: 5px;
            border: 2px solid transparent;
        }
    
        .menu-item a:hover, .dropdown-menu a:hover, .dropdown-menu button:hover {
            color: white;
            background-color: #007bff;
          
            transform: scale(1.05);
           
            border-color: #007bff;
            border-radius: 25px; 
        }
    
        .menu-item a button {
            all: unset;
            cursor: pointer;
        }
    
        .dropdown-menu {
            display: none;
            position: absolute;
            background-color: white;
            top: 100%;
            left: 0;
            min-width: 150px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            overflow: hidden;
            z-index: 1;
            opacity: 0;
            transform: translateY(10px);
            transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1), transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
    
        .dropdown-menu li {
            padding: 0;
            margin: 0;
        }
    
        .dropdown:hover .dropdown-menu {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
@keyframes neon {
    0% {
        box-shadow: 0 0 10px white, 0 0 20px white, 0 0 30px white, 0 0 40px white, 0 0 50px white;
        border-color: white;
    }
    100% {
        box-shadow: 0 0 20px #ffffff, 0 0 30px #ffffff, 0 0 40px #ffffff, 0 0 50px #ffffff, 0 0 60px #ffffff;
        border-color: #ffffff;
    }
}
.container {
    max-width: 900px;
    margin: 20px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}
/* Navbar styles */
.navbar {
    list-style-type: none;
    padding: 0;
    margin: 0;
    display: flex;
    justify-content: flex-start;
}
.menu-item {
    position: relative;
}
.dropdown-toggle1 {
    cursor: pointer;
    font-size: 16px;
    padding: 10px 15px;
   
    color: #1976d2;
    border: none;
    border-radius: 4px;
    text-decoration: none;
    display: inline-block;
}
.dropdown-toggle1:hover {
    background-color: #0056b3;
}
.dropdown-menu1 {
    display: none;
    position: absolute;
    top: 100%;
    left: calc(100% - 320px); 
    background-color: #fff;
    box-shadow: 0 8px 16px rgba(0,0,0,0.2);
    z-index: 1;
    border-radius: 4px;
    padding: 10px;
    min-width: 300px;
    margin-top: 5px;
}
.dropdown-menu1.show {
    display: block;
}
.dropdown-menu1 li {
    display: flex;
    align-items: center;
    margin-bottom: 12px;
}
.dropdown-menu1 li:last-child {
    margin-bottom: 0;
}
.dropdown-menu1 label {
    margin-left: 10px;
    font-size: 14px;
    color: #333;
}
.select-box {
    width: 100%;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-color: #fff;
    background-image: url('data:image/svg+xml;utf8,<svg fill="%23333" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 10l5 5 5-5z"/></svg>');
    background-repeat: no-repeat;
    background-position: right 8px center;
}
.select-box:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
}
.select-box option {
    padding: 8px;
}
/* Switch toggle styles */
.switch {
    position: relative;
    display: inline-block;
    width: 48px;
    height: 28px;
    vertical-align: middle;
}
.switch input {
    opacity: 0;
    width: 0;
    height: 0;
}
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color:red;
    transition: .4s;
    border-radius: 28px;
}
.slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 3px;
    bottom: 3px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}
input:checked + .slider {
    background-color: #4CAF50;
}
input:checked + .slider:before {
    transform: translateX(20px);
}
.slider.round {
    border-radius: 28px;
}
.input-box {
    width: 100%;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-left: 10px;
}
.button {
    cursor: pointer;
    font-size: 14px;
    padding: 8px 12px;
    background-color: #28a745;
    color: #fff;
    border: none;
    border-radius: 4px;
    text-decoration: none;
}
.button:hover {
    background-color: #218838;
}
.button.subscribed {
    background-color: #dc3545;
}
.button.subscribed:hover {
    background-color: #c82333;
}
/* Textarea for current city */
.current-city {
    width: 100%;
    padding: 8px;
    font-size: 14px;
    border: 1px solid #ccc;
    border-radius: 4px;
    resize: none;
    background-color: #e9ecef;
    color: #495057;
}
     .top-bar {
    position: absolute;
    top: 60px;
    left: 50%;
    width: 30%;
    background-color:rgba(255, 255, 255, 0.5);
    color: darkblue;
    text-align: center;
    padding: 5px 0;
    z-index: 900;
    border-radius: 20px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    font-size: 14px;
    transform: translateX(-50%);
}
.top-bar b {
    margin: 0 5px;
}    
.search-bar {
            width: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }
        .search-bar input {
            padding: 10px;
            width: 340px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
        }
        .search-bar button {
            padding: 10px;
            border: none;
            background-color: #007bff;
            color: #fff;
            border-radius: 5px;
            cursor: pointer;
        }
        .search-bar button:hover {
            background-color: #0056b3;
        }

        .weather-info {
            text-align: center;
           
            color: #0056b3;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .weather-info p {
            margin: 5px 0;
        }
        .hourly-forecast {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
        }
        .hourly-forecast {
            margin: 5px 0;
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
        }
        .hourly-forecast > div {
            background-color: rgba(255, 255, 255, 0.5);
            padding: 10px;
            border-radius: 4px;
            margin: 5px;
            width: 180px;
        } 
        h2 {
            color: white;
        }
        .error-message {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #ff4d4d;
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            display: none;
            z-index: 1000;
        }
        @keyframes neon {
            from {
                box-shadow: 0 0 2px white, 
                            0 0 4px white, 
                            0 0 6px white, 
                            0 0 8px white, 
                            0 0 10px white, 
                            0 0 12px white, 
                            0 0 14px white;
            }
            to {
                box-shadow: 0 0 4px white, 
                            0 0 8px white, 
                            0 0 12px white, 
                            0 0 16px white, 
                            0 0 20px white, 
                            0 0 24px white, 
                            0 0 28px white;
            }
        }
        .temperature {
    font-size: 24px;
    position: absolute;
    top: 90px;
    left: 80px;
    padding: 10px 20px;
    border-radius: 10px;
    background-color: #FFFFFF;
    box-shadow: 0 0 10px rgba(0, 0, 139, 0.3);
    z-index: 1;
    border: 1px solid rgba(0, 0, 139, 0.2);
    transition: box-shadow 0.3s ease;
    cursor: pointer;
}
.temperature:hover {
    box-shadow: 0 0 20px rgba(0, 0, 139, 0.6);
}
/* Cursor StYLEe for Temperature L*/
.temperature-label {
    cursor: pointer;
    color: #00008B;
    font-weight: bold;
}
#temperature-value {
    cursor: pointer;
    color: #00008B;
}
#temperature-value::after {
    content: 'C';
    transition: transform 0.3s ease;
}
#unit-toggle:checked ~ #temperature-value::after {
    content: 'F';
    transform: translateY(1px);
}
.unit-toggle {
    display: none;
    cursor: pointer;
}
.voice-button {
    padding: 0;
    background-color:#007bff;
    border: none;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    color: white;
    font-size: 24px;
    cursor: pointer;
    transition: background-color 0.3s;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    display: flex;
    justify-content: center;
    align-items: center;
    margin-left: 10px;
    position: absolute;
    top: 130px; 
    left: 955px;;
}
.voice-button:hover {
    background-color: #0056b3;
}
.popup12 {
    position: absolute;
    background-color: #F0FFFF;
    color: black;
    border: 1px solid #ccc;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    padding: 20px;
    max-width: 300px;
    display: none;
    z-index: 1000;
    border-radius: 8px;
    left: 100px; 
    top: 50%; 
    transform: translateY(-50%);
    animation: fade-in 0.1s ease-out;
}
@keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
}
.clickable-text {
    cursor: pointer;
    
}
.dd{
    color: black;
}
#alert {
            width: 50px;
            height: auto; 
            display:none;
        }
        .container12 {
    position: relative;
    width: 90%;
    max-width: 1200px;
    margin: 20px auto;
    background-color: rgba(255, 255, 255, 0.8);
    padding: 20px;
    box-sizing: border-box;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
}
.dropdown12 {
    position: relative;
    top: 20px;
    right: 20px;
    z-index: 1000;
}
.dropbtn12 {
    background-color: #3498db; 
    color: white;
    padding: 12px;
    font-size: 16px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
   
}

.dropbtn12:hover {
    background-color: #2980b9; 
}
.dropdown-content12 {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
    border-radius: 5px;
    overflow: hidden;
}
.dropdown-content12 a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}
.dropdown-content12 a:hover {
    background-color: #f1f1f1;
}
.dropdown12:hover .dropdown-content12 {
    display: block;
}
.chart-container {
    margin-top: 20px;

}
canvas {
    width: 100%;
    height: auto;
   
}
.dropdown-content12 a::before {
    content: none !important;
}
        .container34 {
        position: absolute; 
        top: 56px;
        right: 20px;
        background-color: #fff;
        padding: 20px;
        width: 300px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        border: 1px solid #ccc;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column; 
        align-items: center;
    }
    .container34:hover {
        transform: translateY(-5px); 
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2); 
    }
    .container34 img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-bottom: 10px;
    }
    .container34 p {
        margin: 0;
        line-height: 1.6;
        text-align: center; 
        color: #555;
    }
    .button-group {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-bottom: 20px;
}

.button-group button {
    background-color: #3498db; 
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 16px;
    border-radius: 20px; 
}

.button-group button:hover {
    background-color: #007bff; 
}

.button-group button.active {
    background-color: #0056b3; 
}
#mute-toggle {
    background-color: #007bff; /* Bootstrap blue color */
    color: #fff;
    border: none;
    cursor: pointer;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s;
    position: absolute;
    top: 124px; /* Adjust this value to position it lower or higher */
    right: 970px; /* Adjust this value to position it left or right */
    z-index: 1000; /* Ensure it's on top of other elements */
}


#mute-toggle:hover {
    background-color: #0056b3; /* Darker blue on hover */
}

#mute-img {
    width: 70%;
    height: auto;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}


    </style>
</head>
<body>
    <div class="loader" id="loader">
        <div></div>
    </div>
   
    <nav>
        <ul class="menu">
            
         
                <li class="menu-item">
                    <a>
                        <button onclick="goBack()">CURRENT WEATHER</button>
                    </a>
                </li>
          
            
        
            
                <li class="menu-item">
                    <a>
                        <button onclick="goBack15()">WEATHER MAP </button>
                    </a>
                </li>
            <li class="menu-item dropdown">
                <a href="#" class="dropdown-toggle">FUTURE FORECAST</a>
                <ul class="dropdown-menu">
                    
                    <li><a><button onclick="goBack19()" id="hourlyButton">DAILY</button></a></li>
                </ul>
            </li>
            <li class="menu-item">
                <a><button onclick="goBack144()" id="api">WEATHER ON MAJOR CITIES</button></a>
              </li>
            <li class="menu-item">
                <a><button onclick="goBack14()" id="api">WEATHER HISTORY</button></a>
            </li>
            <li class="menu-item">
                <a>
                    <button onclick="goBack1()">AIR POLLUTION INDEX</button>
                </a>
            </li>
            <li class="menu-item">
                <a>
                    <button onclick="goBack2()">MARINE WEATHER REPORT</button>
                </a>
            </li>
           
            <li class="menu-item dropdown1">
                <a class="dropdown-toggle1" href="#">⚙ SETTINGS</a>
                <ul class="dropdown-menu1">
                  
                   
                    <li>
                        <label class="switch">
                            <input type="checkbox" id="descrp">
                            <span class="slider round"></span>
                        </label>
                        <label>Descriptive text</label>
                    </li>
                </ul>
            </li>
            
            
    
    </nav>
            
    
    </nav>
    <div class="search-bar">
        <input type="text" id="cityInput" placeholder="Enter city name">
        <button onclick="fetchCityFromSearch()">Search</button>
    </div>
    
        
    
    <div class="clickable-text" onmouseover="showPopup('mp')" onmouseout="hidePopup('mp')">
        <div id="voiceSearchButtonPopup" class="voice-button" onclick="startVoiceRecognition('input')">
            <img src="c:/Users/Mukil/Downloads/pngtree-vector-microphone-icon-png-image_4013734-removebg-preview.png" alt="microphone" style="width: 100%; height: 100%;">
        </div>
        <div id="mp" class="popup12" onmouseover="clearTimeout(popupTimeout)" onmouseout="hidePopup('mp')">
            <div class="popup-content1">
                <p>Welcome to our voice search feature. Make sure you pronounce the city name properly, this feature works accurately around 80% in fetching the city name.</p>
            </div>
        </div>
    </div>
  
    <div class="top-bar">
        <b>TIME:</b><b id="time"></b>
        <br>
        <b>DATE:</b><b id="date"></b>
    </div>
    <div class="weather-info" id="weather-info">
       
        
        </div>
    </div>
    <div class="error-message" id="error-message">
       
    </div>
    
    <div class="container12">
        <div class="dropdown12">
            <button class="dropbtn12">Temperature</button>
            <div class="dropdown-content12">
                <a href="#" data-dataset="temperature">Temperature</a>
                <a href="#" data-dataset="humidity">Humidity</a>
                <a href="#" data-dataset="wind-speed">Wind Speed</a>
            </div>
        </div>
        <div class="chart-container">
            <div class="button-group">
                <button id="metricBtn" onclick="switchUnits('metric')">°C</button>
        <button id="imperialBtn" onclick="switchUnits('imperial')">°F</button>
            </div>
            <canvas id="weatherChart"></canvas>
        </div>
    </div>
 

    <script>
     const openWeatherAPIKey = '36b3e04a424745f6b12a3bcf00e54769';
    const weatherAPIKey = 'f49b75258d944d88815113325242505';
    const timeZoneDBAPIKey = 'XB6EHS2NKPG6';
    let currentUnits = 'metric';
    let weatherChart = null;
     const time = new Date().getHours();
        if (time >= 6 && time < 16) {
            document.body.style.backgroundImage = 'url("c:/Users/Mukil/Downloads/noon sky (2) (2).jpg")';
        } else if (time >= 16 && time < 19) {
            document.body.style.backgroundImage = 'url("c:/Users/Mukil/Downloads/depositphotos_582319764-stock-photo-summer-evening-stormy-sky (1).jpg")';
        } else {
            document.body.style.backgroundImage = 'url("c:/Users/Mukil/Downloads/pexels-pixabay-414727 (1).jpg")';
        }
        

window.onload = function() {
    let timeZoneOffset = 0;
    let cityName = '';
    const urlParams = new URLSearchParams(window.location.search);
    const encodedCityName = urlParams.get('city');
    if (encodedCityName) {
        cityName = decodeURIComponent(encodedCityName);
        fetchWeatherData(cityName);
        fetchWeatherData1(cityName);
        document.getElementById('cityInput').value = cityName;
    } else {
        console.error('City name not found in URL parameters.');
    }

    document.getElementById('citySearchButton').addEventListener('click', fetchCityFromSearch);
}

function redirectToAirPollutionPage() {
    const cityInput = document.getElementById('city-input').value.trim();
    
    if (cityInput) {
        const encodedCityName = encodeURIComponent(cityInput);
        window.location.href = `air.html?city=${encodedCityName}`;
    } else {
        alert('Please enter a city name.');
    }
}
function redirectToMPollutionPage() {
    const cityInput = document.getElementById('city-input').value.trim();
    
    if (cityInput) {
        const encodedCityName = encodeURIComponent(cityInput);
        window.location.href = `marine.html?city=${encodedCityName}`;
    } else {
        alert('Please enter a city name.');
    }
}
        function startVoiceRecognition(inputId) {
    if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        const recognition = new SpeechRecognition();
        recognition.interimResults = true;
        recognition.onresult = function(event) {
            const last = event.results.length - 1;
            let command = event.results[last][0].transcript.trim();
            if (command.endsWith(".")) {
                command = command.slice(0, -1);
            }
            document.getElementById('cityInput').value = command;
            fetchWeatherData(command);
          
           fetchWeatherData1(command);
        };
        recognition.start();
    } else {
        alert('Speech recognition is not supported in your browser. Please use Chrome or Edge.');
    }
}
      
        document.querySelectorAll('.dropdown-content12 a').forEach(item => {
            item.addEventListener('click', async function(event) {
                event.preventDefault();
                const dataset = this.getAttribute('data-dataset');
                document.querySelector('.dropbtn12').textContent = this.textContent;
                const data = await fetchWeatherData1(cityName);
                if (data) {
                    updateWeatherChart(data, dataset)
                }
            });
        });
function formatDate(date) {
    const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    return date.toLocaleDateString('en-US', options);
}
document.querySelectorAll('.dropdown-content12 a').forEach(item => {
    item.addEventListener('click', async function(event) {
        event.preventDefault();
        const dataset = this.getAttribute('data-dataset');
        document.querySelector('.dropbtn12').textContent = this.textContent;
        const data = await fetchWeatherData1(cityName);
        if (data) {
            updateWeatherChart(data, dataset)
        }
    });
});

document.querySelector('.dropdown-toggle1').addEventListener('click', function(event) {
    event.preventDefault();
    document.querySelector('.dropdown-menu1').classList.toggle('show');
});
window.onclick = function(event) {
    if (!event.target.matches('.dropdown-toggle1') && !event.target.closest('.dropdown-menu1')) {
        var dropdowns = document.getElementsByClassName("dropdown-menu1");
        for (var i = 0; i < dropdowns.length; i++) {
            var openDropdown = dropdowns[i];
            if (openDropdown.classList.contains('show')) {
                openDropdown.classList.remove('show');
            }
        }
    }
}

function goBack() {
    const urlParams = new URLSearchParams(window.location.search);
const encodedCityName = urlParams.get('city');
const cityInput = document.getElementById('cityInput');
const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
const url = 'weather dashboard.html' + '?city=' + encodeURIComponent(cityName);
window.location.href = url;
} 


function goBack1() {
    const urlParams = new URLSearchParams(window.location.search);
const encodedCityName = urlParams.get('city');
const cityInput = document.getElementById('cityInput');
const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
const url = 'air.html' + '?city=' + encodeURIComponent(cityName);
window.location.href = url;
} 
function goBack2() {
    const urlParams = new URLSearchParams(window.location.search);
const encodedCityName = urlParams.get('city');
const cityInput = document.getElementById('cityInput');
const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
const url = 'marine.html' + '?city=' + encodeURIComponent(cityName);
window.location.href = url;
} 
function goBack14() {
            const urlParams = new URLSearchParams(window.location.search);
            const encodedCityName = urlParams.get('city');
            const cityInput = document.getElementById('cityInput');
            const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
            const url = 'pastweather.html?city=' + encodeURIComponent(cityName);
            window.location.href = url;
        }
        
function goBack15() {
            const urlParams = new URLSearchParams(window.location.search);
            const encodedCityName = urlParams.get('city');
            const cityInput = document.getElementById('cityInput');
            const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
            const url = 'map.html?city=' + encodeURIComponent(cityName);
            window.location.href = url;
        }
        function goBack19() {
            const urlParams = new URLSearchParams(window.location.search);
            const encodedCityName = urlParams.get('city');
            const cityInput = document.getElementById('cityInput');
            const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
            const url = 'Daily.html?city=' + encodeURIComponent(cityName);
            window.location.href = url;
        }
        function goBack144() {
            const urlParams = new URLSearchParams(window.location.search);
            const encodedCityName = urlParams.get('city');
            const cityInput = document.getElementById('cityInput');
            const cityName = cityInput.value.trim() || (encodedCityName ? decodeURIComponent(encodedCityName) : '');
            const url = 'major.html?city=' + encodeURIComponent(cityName);
            window.location.href = url;
        }
async function fetchCityFromSearch() {
    const cityInput = document.getElementById('cityInput');
    cityName = cityInput.value.trim();
    if (!cityName) {
        showNotification("Please enter a city name.", 'error');
        return;
    }
    fetchWeatherData(cityName);
    updateWeatherChart(data, dataset, units)
   
}
var popupTimeout;
var popupsEnabled = true; 
var savedValue = localStorage.getItem('popupsEnabled');
if (savedValue !== null) {
    popupsEnabled = JSON.parse(savedValue);
    document.getElementById('descrp').checked = popupsEnabled;
    togglePopups(popupsEnabled); 
}
document.getElementById('descrp').addEventListener('change', function() {
    popupsEnabled = this.checked; 
    localStorage.setItem('popupsEnabled', popupsEnabled); 
    togglePopups(popupsEnabled); 
});
function togglePopups(enabled) {
    var popups = document.querySelectorAll('.popup12');
    popups.forEach(function(popup) {
        if (enabled) {
            popup.style.display = 'none';
        } else {
            popup.style.display = 'none';
        }
    });
}
function showPopup(popupId) {
    if (!popupsEnabled) return;
    var popup = document.getElementById(popupId);
    clearTimeout(popupTimeout);
    var spanRect = document.querySelector('.clickable-text').getBoundingClientRect();
    var popupWidth = popup.offsetWidth;
    popup.style.top = (spanRect.top + (spanRect.height / 2)) + 'px';
    popup.style.left = (spanRect.left - popupWidth - 10) + 'px'; 
    popup.style.display = 'block';
    popup.classList.add('fade-in');
}
function hidePopup(popupId) {
    var popup = document.getElementById(popupId);
    popup.classList.remove('fade-in');
    popupTimeout = setTimeout(function() {
        popup.style.display = 'none';
    }, 100);
}
document.getElementById('trigger-text').addEventListener('mouseenter', function(event) {
    var popup = document.getElementById('popup123');
    var rect = event.target.getBoundingClientRect();
    popup.style.top = rect.top + 'px';
    popup.style.left = rect.right + 'px';
    popup.style.display = 'block';
});
document.getElementById('trigger-text').addEventListener('mouseleave', function() {
    var popup = document.getElementById('popup123');
    popup.style.display = 'none';
});


    







async function fetchWeatherData(cityName) {
    const loader = document.getElementById('loader');
    loader.style.display = 'block';
    try {
        const coordinates = await getCoordinates(cityName);
        if (!coordinates) {
            throw new Error('Coordinates not found for city: ' + cityName);
        }
        timeZoneOffset = await getTimeZone(coordinates.lat, coordinates.lon);
        if (timeZoneOffset === null) {
            throw new Error('Failed to fetch time zone information for city: ' + cityName);
        }
        updateTime(); 
        setInterval(updateTime, 1000); 
       const url = `https://api.weatherapi.com/v1/forecast.json?key=${weatherAPIKey}&q=${encodeURIComponent(cityName)}&hours=24&aqi=no&alerts=no`;;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch weather data: ${response.statusText}`);
        }
        const data = await response.json();
        loader.style.display = 'none';
        if (data.error) {
            throw new Error(`Weather API error: ${data.error.message}`);
        } else {
            showWeather(data);
        }
      
       
        setInterval(() => fetchWeatherData(cityName), 3600000);
    } catch (error) {
        console.error('Error fetching weather data:', error);
        showNotification(error.message, 'error');
        loader.style.display = 'none';
    }
}

async function fetchWeatherData1(cityName) {
   
    try {
        const url = `https://api.weatherapi.com/v1/forecast.json?key=${weatherAPIKey}&q=${encodeURIComponent(cityName)}&hours=24&aqi=no&alerts=no`;
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`Failed to fetch weather data: ${response.statusText}`);
        }
        const data = await response.json();
       
        if (data.error) {
            throw new Error(`Weather API error: ${data.error.message}`);
        } else {
            updateWeatherChart(data, 'temperature', currentUnits);
        }
        return data;
    } catch (error) {
        console.error('Error fetching weather data:', error);
        showNotification(error.message, 'error');
       
        return null;
    }
}




async function getCoordinates(cityName) {
    try {
        const response = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${cityName}&limit=1&appid=${openWeatherAPIKey}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch coordinates: ${response.statusText}`);
        }
        const data = await response.json();
        if (data.length === 0) {
            throw new Error(`Coordinates not found for city: ${cityName}`);
        }
        return { lat: data[0].lat, lon: data[0].lon };
    } catch (error) {
        console.error('Error in getCoordinates:', error);
        showNotification(`Error fetching coordinates: ${error.message}`, 'error');
        return null;
    }
}
async function getTimeZone(lat, lon) {
    try {
        const response = await fetch(`https://api.timezonedb.com/v2.1/get-time-zone?key=${timeZoneDBAPIKey}&format=json&by=position&lat=${lat}&lng=${lon}`);
        if (!response.ok) {
            throw new Error(`Failed to fetch time zone: ${response.statusText}`);
        }
        const data = await response.json();
        if (data.status !== 'OK') {
            throw new Error(`Time zone data status not OK: ${JSON.stringify(data)}`);
        }
        return data.gmtOffset;
    } catch (error) {
        console.error('Error in getTimeZone:', error);
        showNotification(`Error fetching time zone: ${error.message}`, 'error');
        return null;
    }
}
function updateTime() {
    if (isNaN(timeZoneOffset)) return;
    const now = new Date();
    const localTime = new Date(now.getTime() + now.getTimezoneOffset() * 60000 + timeZoneOffset * 1000);
    document.getElementById('time').innerText = localTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });
    document.getElementById('date').innerText = formatDate(localTime);
}
function showWeather(data) {
    const weatherInfo = document.getElementById('weather-info');
    const forecast = data.forecast.forecastday[0].hour;
    const now = new Date();
    const localNow = new Date(now.getTime() + now.getTimezoneOffset() * 60000 + timeZoneOffset * 1000);
    let forecastHTML = '<h2>Hourly Forecast in ' + data.location.name + '</h2><div class="hourly-forecast" id="hourly-forecast">';
        forecastHTML += forecast.map(hour => {
    const hourDateTime = new Date(hour.time);
    if (hourDateTime > localNow) {
       
        
        return `
            <div>
                <p>${hourDateTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' })}</p>
                <img src="https:${hour.condition.icon}" alt="${hour.condition.text}">
                <p><strong>Temp:</strong> <span class="temp">${hour.temp_c}°C/${hour.temp_f}°F</span></p>
                <p><strong>Humidity:</strong> ${hour.humidity}%</p>
                <p><strong>Condition:</strong> ${hour.condition.text}</p>
                <p><strong>Feels Like:</strong> <span class="feels-like">${hour.feelslike_c}°C/${hour.feelslike_f}°F</span></p>
                <p><strong>Wind Speed:</strong> ${hour.wind_kph}kph / ${hour.wind_mph}mph</p>
            </div>
        `;
     
    }

        else {
            return '';
        }
    }).join('');
    forecastHTML += '</div>';
    weatherInfo.innerHTML = forecastHTML;
    updateWeatherChart(data, 'temperature',currentUnits);
}


function updateWeatherChart(data, dataset, units) {
            const forecast = data.forecast.forecastday[0].hour.slice(0, 24); 
            const labels = forecast.map(hour => hour.time.slice(-5)); 
            let chartData, backgroundColor, borderColor, yAxisLabel;

            switch (dataset) {
                case 'temperature':
                    chartData = forecast.map(hour => units === 'metric' ? hour.temp_c : hour.temp_f);
                    backgroundColor = 'rgba(231, 76, 60, 0.2)'; 
                    borderColor = 'rgba(231, 76, 60, 1)';
                    yAxisLabel = `Temperature (${units === 'metric' ? '°C' : '°F'})`;
                    break;
                case 'humidity':
                    chartData = forecast.map(hour => hour.humidity);
                    backgroundColor = 'rgba(52, 152, 219, 0.2)'; 
                    borderColor = 'rgba(52, 152, 219, 1)';
                    yAxisLabel = 'Humidity (%)';
                    break;
                case 'feels-like':
                    chartData = forecast.map(hour => units === 'metric' ? hour.feelslike_c : hour.feelslike_f);
                    backgroundColor = 'rgba(255, 159, 26, 0.2)';
                    borderColor = 'rgba(255, 159, 26, 1)';
                    yAxisLabel = `Feels Like Temperature (${units === 'metric' ? '°C' : '°F'})`;
                    break;
                case 'wind-speed':
                    chartData = forecast.map(hour => units === 'metric' ? hour.wind_kph : hour.wind_mph);
                    backgroundColor = 'green'; 
                    borderColor = 'green';
                    yAxisLabel = `Wind Speed (${units === 'metric' ? 'kph' : 'mph'})`;
                    break;
                default:
                    chartData = forecast.map(hour => units === 'metric' ? hour.temp_c : hour.temp_f);
                    backgroundColor = 'rgba(231, 76, 60, 0.2)';
                    borderColor = 'rgba(231, 76, 60, 1)';
                    yAxisLabel = `Temperature (${units === 'metric' ? '°C' : '°F'})`;
            }

            const ctx = document.getElementById('weatherChart').getContext('2d');
            if (weatherChart) {
                weatherChart.destroy();
            }
            weatherChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: dataset.charAt(0).toUpperCase() + dataset.slice(1), 
                        data: chartData,
                        backgroundColor: backgroundColor,
                        borderColor: borderColor,
                        borderWidth: 1,
                        fill: false,
                    }]
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time of Day'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: yAxisLabel
                            },
                            beginAtZero: true
                        }
                    }
                }
            });
        }

        async function switchDataset(dataset) {
            try {
                const data = await fetchWeatherData1(cityName, currentUnits);
                updateWeatherChart(data, dataset, currentUnits);
               
                document.querySelectorAll('.button-group button').forEach(btn => {
                    if (btn.id.includes(dataset)) {
                        btn.classList.add('active');
                    } else if (btn.id.includes('metric') || btn.id.includes('imperial')) {
                        
                    } else {
                        btn.classList.remove('active');
                    }
                });
            } catch (error) {
                console.error('Failed to retrieve weather data:', error);
               
            }
        }

        function switchUnits(units) {
            currentUnits = units;
          
            if (units === 'metric') {
                document.getElementById('metricBtn').classList.add('active');
                document.getElementById('imperialBtn').classList.remove('active');
            } else {
                document.getElementById('metricBtn').classList.remove('active');
                document.getElementById('imperialBtn').classList.add('active');
            }
           
            const activeDatasetBtn = document.querySelector('.button-group button.active:not(#metricBtn):not(#imperialBtn)');
            const activeDataset = activeDatasetBtn ? activeDatasetBtn.id.replace('Btn', '').toLowerCase() : 'temperature';
            switchDataset(activeDataset);
        }

        
        switchDataset('temperature');
      
       
        async function getWeatherData() {
            try {
                const data = await fetchWeatherData1(cityName, currentUnits);
                console.log(data);
            } catch (error) {
                console.error('Failed to retrieve weather data:', error);
               // document.getElementById('weather-info').innerHTML = '<h2>Failed to fetch weather data</h2>';
            }
        }
      

        getWeatherData().then(() => {
            console.log('Weather data successfully retrieved and shown');
        }).catch(err => {
            console.error('Failed to retrieve weather data:', err);
           // document.getElementById('weather-info').innerHTML = '<h2>Failed to fetch weather data</h2>';
        });
       
      

        </script>
</body>
</html>
